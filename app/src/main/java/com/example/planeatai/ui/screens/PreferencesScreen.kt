package com.example.planeatai.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.foundation.selection.selectable
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.foundation.text.KeyboardOptions
import com.example.planeatai.ui.model.UserPreferences
import com.example.planeatai.ui.model.MealPreferences
import androidx.activity.compose.BackHandler

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PreferencesScreen(
    initialPreferences: UserPreferences,
    onSave: (UserPreferences) -> Unit,
    onBack: () -> Unit
) {
    var favoriteFood by remember { mutableStateOf(initialPreferences.favoriteFood) }
    var dislikedFood by remember { mutableStateOf(initialPreferences.dislikedFood) }
    var breakfastPrefs by remember { mutableStateOf(initialPreferences.breakfastPrefs) }
    var lunchPrefs by remember { mutableStateOf(initialPreferences.lunchPrefs) }
    var dinnerPrefs by remember { mutableStateOf(initialPreferences.dinnerPrefs) }
    var cuisineStyles by remember { mutableStateOf(initialPreferences.cuisineStyles) }
    var servings by remember { mutableStateOf(initialPreferences.servings) }
    var additionalRequests by remember { mutableStateOf(initialPreferences.additionalRequests) }
    
    var showExitDialog by remember { mutableStateOf(false) }

    // Function ƒë·ªÉ ki·ªÉm tra c√≥ thay ƒë·ªïi kh√¥ng
    fun hasChanges(): Boolean {
        return favoriteFood != initialPreferences.favoriteFood ||
                dislikedFood != initialPreferences.dislikedFood ||
                breakfastPrefs != initialPreferences.breakfastPrefs ||
                lunchPrefs != initialPreferences.lunchPrefs ||
                dinnerPrefs != initialPreferences.dinnerPrefs ||
                cuisineStyles != initialPreferences.cuisineStyles ||
                servings != initialPreferences.servings ||
                additionalRequests != initialPreferences.additionalRequests
    }

    // Function ƒë·ªÉ l∆∞u preferences
    fun saveCurrentPreferences() {
        val updatedPreferences = UserPreferences(
            favoriteFood = favoriteFood,
            dislikedFood = dislikedFood,
            breakfastPrefs = breakfastPrefs,
            lunchPrefs = lunchPrefs,
            dinnerPrefs = dinnerPrefs,
            cuisineStyles = cuisineStyles,
            servings = servings,
            additionalRequests = additionalRequests
        )
        onSave(updatedPreferences)
    }

    // Handle back button
    BackHandler {
        if (hasChanges()) {
            showExitDialog = true
        } else {
            onBack()
        }
    }

    // Dialog h·ªèi c√≥ l∆∞u kh√¥ng khi tho√°t
    if (showExitDialog) {
        AlertDialog(
            onDismissRequest = { showExitDialog = false },
            title = { 
                Text(
                    "üíæ L∆∞u c√†i ƒë·∫∑t?",
                    style = MaterialTheme.typography.titleLarge,
                    fontWeight = FontWeight.Bold
                ) 
            },
            text = { 
                Text(
                    "B·∫°n ƒë√£ thay ƒë·ªïi m·ªôt s·ªë c√†i ƒë·∫∑t. B·∫°n c√≥ mu·ªën l∆∞u nh·ªØng thay ƒë·ªïi n√†y kh√¥ng?",
                    style = MaterialTheme.typography.bodyLarge
                ) 
            },
            confirmButton = {
                Button(
                    onClick = {
                        saveCurrentPreferences()
                        showExitDialog = false
                        onBack()
                    }
                ) {
                    Text("üíæ L∆∞u & Tho√°t")
                }
            },
            dismissButton = {
                OutlinedButton(
                    onClick = {
                        showExitDialog = false
                        onBack()
                    }
                ) {
                    Text("üö´ Kh√¥ng l∆∞u")
                }
            }
        )
    }

    val availableCuisines = listOf(
        "Vi·ªát Nam", "Trung Qu·ªëc", "Nh·∫≠t B·∫£n", "H√†n Qu·ªëc", "Th√°i Lan",
        "·∫§n ƒê·ªô", "√ù", "Ph√°p", "M·ªπ", "ƒê·ªãa Trung H·∫£i", "Chay/Thu·∫ßn chay"
    )

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("üîß C√†i ƒë·∫∑t s·ªü th√≠ch ƒÉn u·ªëng") },
                navigationIcon = {
                    IconButton(onClick = { 
                        if (hasChanges()) {
                            showExitDialog = true
                        } else {
                            onBack()
                        }
                    }) {
                        Icon(Icons.Default.ArrowBack, contentDescription = "Quay l·∫°i")
                    }
                }
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(16.dp)
                .verticalScroll(rememberScrollState()),
            verticalArrangement = Arrangement.spacedBy(20.dp)
        ) {
            // Ph·∫ßn 1: S·ªü th√≠ch c√° nh√¢n
            PreferenceSection(
                title = "üçΩÔ∏è S·ªü th√≠ch c√° nh√¢n",
                content = {
                    OutlinedTextField(
                        value = favoriteFood,
                        onValueChange = { favoriteFood = it },
                        label = { Text("üíù M√≥n ƒÉn y√™u th√≠ch") },
                        placeholder = { Text("V√≠ d·ª•: Ph·ªü, B√∫n b√≤ Hu·∫ø, Sushi...") },
                        modifier = Modifier.fillMaxWidth(),
                        minLines = 2
                    )
                    
                    Spacer(modifier = Modifier.height(12.dp))
                    
                    OutlinedTextField(
                        value = dislikedFood,
                        onValueChange = { dislikedFood = it },
                        label = { Text("üö´ M√≥n ƒÉn kh√¥ng th√≠ch") },
                        placeholder = { Text("V√≠ d·ª•: ƒê·ªì cay, h·∫£i s·∫£n, n·ªôi t·∫°ng...") },
                        modifier = Modifier.fillMaxWidth(),
                        minLines = 2
                    )
                }
            )

            // Ph·∫ßn 2: Phong c√°ch ·∫©m th·ª±c
            PreferenceSection(
                title = "üåç Phong c√°ch ·∫©m th·ª±c",
                content = {
                    Text(
                        "Ch·ªçn nhi·ªÅu phong c√°ch ƒë·ªÉ c√≥ th·ª±c ƒë∆°n ƒëa d·∫°ng trong tu·∫ßn:",
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    // Grid layout cho cuisine styles
                    for (i in availableCuisines.indices step 2) {
                        Row(
                            modifier = Modifier.fillMaxWidth(),
                            horizontalArrangement = Arrangement.spacedBy(8.dp)
                        ) {
                            FilterChip(
                                selected = cuisineStyles.contains(availableCuisines[i]),
                                onClick = {
                                    cuisineStyles = if (cuisineStyles.contains(availableCuisines[i])) {
                                        cuisineStyles - availableCuisines[i]
                                    } else {
                                        cuisineStyles + availableCuisines[i]
                                    }
                                },
                                label = { Text(availableCuisines[i]) },
                                modifier = Modifier.weight(1f)
                            )
                            
                            if (i + 1 < availableCuisines.size) {
                                FilterChip(
                                    selected = cuisineStyles.contains(availableCuisines[i + 1]),
                                    onClick = {
                                        cuisineStyles = if (cuisineStyles.contains(availableCuisines[i + 1])) {
                                            cuisineStyles - availableCuisines[i + 1]
                                        } else {
                                            cuisineStyles + availableCuisines[i + 1]
                                        }
                                    },
                                    label = { Text(availableCuisines[i + 1]) },
                                    modifier = Modifier.weight(1f)
                                )
                            } else {
                                Spacer(modifier = Modifier.weight(1f))
                            }
                        }
                    }
                }
            )

            // Ph·∫ßn 3: S·ªë ng∆∞·ªùi ƒÉn
            PreferenceSection(
                title = "üë• Th√¥ng tin kh·∫©u ph·∫ßn",
                content = {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(16.dp)
                    ) {
                        Text(
                            "S·ªë ng∆∞·ªùi ƒÉn:",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.Medium
                        )
                        
                        OutlinedTextField(
                            value = servings.toString(),
                            onValueChange = { value ->
                                value.toIntOrNull()?.let { servings = it.coerceIn(1, 10) }
                            },
                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                            modifier = Modifier.width(80.dp),
                            singleLine = true
                        )
                        
                        Text("ng∆∞·ªùi")
                    }
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    Card(
                        modifier = Modifier.fillMaxWidth(),
                        colors = CardDefaults.cardColors(
                            containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f)
                        )
                    ) {
                        Column(modifier = Modifier.padding(12.dp)) {
                            Text(
                                "‚ÑπÔ∏è L∆∞u √Ω v·ªÅ kh·∫©u ph·∫ßn:",
                                style = MaterialTheme.typography.titleSmall,
                                fontWeight = FontWeight.Bold,
                                color = MaterialTheme.colorScheme.primary
                            )
                            Text(
                                "‚Ä¢ Th√¥ng tin dinh d∆∞·ª°ng: cho 1 ng∆∞·ªùi\n" +
                                "‚Ä¢ Nguy√™n li·ªáu & c√¥ng th·ª©c: cho $servings ng∆∞·ªùi\n" +
                                "‚Ä¢ Ng√¢n s√°ch: t·ªïng cho $servings ng∆∞·ªùi",
                                style = MaterialTheme.typography.bodyMedium,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                        }
                    }
                }
            )

            // Ph·∫ßn 4: C√†i ƒë·∫∑t t·ª´ng b·ªØa ƒÉn
            MealPreferenceCard(
                title = "üåÖ B·ªØa s√°ng",
                mealPrefs = breakfastPrefs,
                onPrefsChange = { breakfastPrefs = it },
                borderColor = MaterialTheme.colorScheme.tertiary,
                servings = servings
            )

            MealPreferenceCard(
                title = "üåû B·ªØa tr∆∞a", 
                mealPrefs = lunchPrefs,
                onPrefsChange = { lunchPrefs = it },
                borderColor = MaterialTheme.colorScheme.primary,
                servings = servings
            )

            MealPreferenceCard(
                title = "üåô B·ªØa t·ªëi",
                mealPrefs = dinnerPrefs,
                onPrefsChange = { dinnerPrefs = it },
                borderColor = MaterialTheme.colorScheme.secondary,
                servings = servings
            )

            // Ph·∫ßn 5: Y√™u c·∫ßu b·ªï sung
            PreferenceSection(
                title = "üìù Y√™u c·∫ßu b·ªï sung",
                content = {
                    OutlinedTextField(
                        value = additionalRequests,
                        onValueChange = { additionalRequests = it },
                        label = { Text("Y√™u c·∫ßu kh√°c") },
                        placeholder = { Text("V√≠ d·ª•: √çt d·∫ßu m·ª°, nhi·ªÅu rau xanh, d·ªÖ n·∫•u, kh√¥ng gia v·ªã n·∫∑ng...") },
                        modifier = Modifier.fillMaxWidth(),
                        minLines = 3
                    )
                }
            )

            // N√∫t l∆∞u
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                OutlinedButton(
                    onClick = { onBack() },
                    modifier = Modifier.weight(1f),
                    shape = RoundedCornerShape(12.dp)
                ) {
                    Text("‚ùå H·ªßy")
                }
                
                Button(
                    onClick = {
                        saveCurrentPreferences()
                        onBack()
                    },
                    modifier = Modifier.weight(2f),
                    shape = RoundedCornerShape(12.dp)
                ) {
                    Text(
                        "üíæ L∆∞u c√†i ƒë·∫∑t", 
                        fontSize = 16.sp,
                        fontWeight = FontWeight.Bold
                    )
                }
            }

            Spacer(modifier = Modifier.height(20.dp))
        }
    }
}

@Composable
private fun PreferenceSection(
    title: String,
    content: @Composable ColumnScope.() -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.3f)
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = title,
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold,
                color = MaterialTheme.colorScheme.primary
            )
            
            Spacer(modifier = Modifier.height(12.dp))
            
            content()
        }
    }
}

@Composable
private fun MealPreferenceCard(
    title: String,
    mealPrefs: MealPreferences,
    onPrefsChange: (MealPreferences) -> Unit,
    borderColor: androidx.compose.ui.graphics.Color,
    servings: Int
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(
            containerColor = borderColor.copy(alpha = 0.1f)
        ),
        border = androidx.compose.foundation.BorderStroke(2.dp, borderColor.copy(alpha = 0.3f))
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = title,
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold,
                color = borderColor
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
            // Th·ªùi gian chu·∫©n b·ªã
            MealPreferenceItem(
                label = "‚è±Ô∏è Th·ªùi gian chu·∫©n b·ªã",
                value = mealPrefs.prepTime.toString(),
                unit = "ph√∫t",
                onValueChange = { value ->
                    value.toIntOrNull()?.let { newValue ->
                        onPrefsChange(mealPrefs.copy(prepTime = newValue.coerceIn(5, 180)))
                    }
                }
            )
            
            Spacer(modifier = Modifier.height(12.dp))
            
            // Calo mong mu·ªën  
            MealPreferenceItem(
                label = "üî• Calo mong mu·ªën",
                value = mealPrefs.calories.toString(),
                unit = "kcal/ng∆∞·ªùi",
                onValueChange = { value ->
                    value.toIntOrNull()?.let { newValue ->
                        onPrefsChange(mealPrefs.copy(calories = newValue.coerceIn(100, 1500)))
                    }
                }
            )
            
            Spacer(modifier = Modifier.height(12.dp))
            
            // Ng√¢n s√°ch
            MealPreferenceItem(
                label = "üí∞ Ng√¢n s√°ch",
                value = (mealPrefs.budget / 1000).toString(),
                unit = "k VND ($servings ng∆∞·ªùi)",
                onValueChange = { value ->
                    value.toIntOrNull()?.let { newValue ->
                        val budgetInVnd = (newValue * 1000).coerceIn(10000, 500000)
                        onPrefsChange(mealPrefs.copy(budget = budgetInVnd))
                    }
                }
            )
        }
    }
}

@Composable
private fun MealPreferenceItem(
    label: String,
    value: String,
    unit: String,
    onValueChange: (String) -> Unit
) {
    Row(
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.spacedBy(12.dp)
    ) {
        Text(
            text = label,
            style = MaterialTheme.typography.bodyLarge,
            modifier = Modifier.weight(1f)
        )
        
        OutlinedTextField(
            value = value,
            onValueChange = onValueChange,
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            modifier = Modifier.width(80.dp),
            singleLine = true
        )
        
        Text(
            text = unit,
            style = MaterialTheme.typography.bodyMedium,
            modifier = Modifier.width(100.dp)
        )
    }
}